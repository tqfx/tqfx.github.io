var searchIndex = JSON.parse('{\
"liba":{"doc":"An algorithm library based on C/C++ language","t":"TCCCLLMFFGLLAMAAACCCALLLGFFFFRRRRRRRFFFFFFRRDRLLLLMMLLLLLLLLLLLLMLMMLLLLLLLMLLLLNNNNNNNDLLLLLLLLLLLLLMMMLLLLELLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLL","n":["Float","PID","PID_fuzzy","TF","borrow","borrow_mut","f","f32_rsqrt","f64_rsqrt","float","from","into","mf","p","pid","pid_fuzzy","polytrack","polytrack3","polytrack5","polytrack7","tf","try_from","try_into","type_id","uint","version","version_major","version_minor","version_patch","GAUSS","GBELL","NUL","SIG","TRAP","TRI","Z","gauss","gbell","sig","trap","tri","z","INC","OFF","PID","POS","borrow","borrow_mut","chan","dt","err","fdb","from","inc","into","kd","ki","kp","kpid","mode","new","new_inc","new_pos","off","out","outf","outmax","outmin","outp","pos","set_dt","set_kd","set_ki","set_kp","set_mode","summax","try_from","try_into","type_id","zero","AND","AND_ALGEBRA","AND_BOUNDED","EQU","OR","OR_ALGEBRA","OR_BOUNDED","PID_fuzzy","base","borrow","borrow","borrow_mut","borrow_mut","buff","chan","dt","from","from","inc","into","into","kd","ki","kp","kpid","mode","new","off","op","outf","outp","pid","pos","set_dt","set_mode","set_op","try_from","try_from","try_into","try_into","type_id","type_id","zero","acc","acc","acc","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","gen","gen","gen","into","into","into","jer","new","new","new","out","out","out","polytrack3","polytrack5","polytrack7","pos","pos","pos","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vel","vel","vel","TF","borrow","borrow_mut","den","from","into","iter","new","num","set_den","set_num","try_from","try_into","type_id","u","v","zero"],"q":["liba","","","","","","","","","","","","","","","","","","","","","","","","","","","","","liba::mf","","","","","","","","","","","","","liba::pid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","liba::pid_fuzzy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","liba::polytrack","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","liba::tf","","","","","","","","","","","","","","","",""],"d":["floating-point number union","","","","","","as a floating-point number","fast inverse square-root, $ \\\\frac{1}{\\\\sqrt{x}} $","fast inverse square-root, $ \\\\frac{1}{\\\\sqrt{x}} $","floating-point number stored using <code>f64</code>","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","membership function","as a floating-point array","proportional integral derivative controller","fuzzy proportional integral derivative controller","polynomial trajectory","","","","transfer function","","","","Equivalent to C’s unsigned int type.","algorithm library version","algorithm library version major","algorithm library version minor","algorithm library version patch","gaussian membership function","generalized bell-shaped membership function","none","sigmoidal membership function","trapezoidal membership function","triangular membership function","z-shaped membership function","gaussian membership function","generalized bell-shaped membership function","sigmoidal membership function","trapezoidal membership function","triangular membership function","z-shaped membership function","incremental PID controller","turn off PID controller","proportional integral derivative controller","positional PID controller","","","set buffer for multichannel PID controller","get sampling time unit(s) for PID controller","cache error","cache feedback","Returns the argument unchanged.","incremental PID controller","Calls <code>U::from(self)</code>.","get derivative constant for PID controller","get integral constant for PID controller","get proportional constant for PID controller","set proportional integral derivative constant for PID …","get mode for PID controller","initialize function for PID controller, default is turn off","initialize function for incremental PID controller","initialize function for positional PID controller","turn off PID controller","controller output","calculate function for PID controller","maximum output","minimum output","calculate function for multichannel PID controller","positional PID controller","set sampling time unit(s) for PID controller","set derivative constant for PID controller","set integral constant for PID controller","set proportional constant for PID controller","set mode for PID controller","maximum integral output","","","","zero function for PID controller","min(l,r)","l*r","max(l,r)","sqrt(l,r)<em>sqrt(1-(1-r)</em>(1-r))","max(l,r)","l+r-l*r","min(l,r)","fuzzy proportional integral derivative controller","set rule base for fuzzy PID controller","","","","","set buffer for fuzzy PID controller","set buffer for multichannel fuzzy PID controller","get sampling time unit(s) for fuzzy PID controller","Returns the argument unchanged.","Returns the argument unchanged.","incremental fuzzy PID controller","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","base derivative constant","base integral constant","base proportional constant","set proportional integral derivative constant for fuzzy …","get mode for fuzzy PID controller","initialize function for fuzzy PID controller, default is …","turn off fuzzy PID controller","enumeration for fuzzy PID controller operator","calculate function for fuzzy PID controller","calculate function for multichannel fuzzy PID controller","proportional integral derivative controller","positional fuzzy PID controller","set sampling time unit(s) for fuzzy PID controller","set mode for PID controller","set fuzzy relational operator for fuzzy PID controller","","","","","","","zero function for fuzzy PID controller","calculate function for cubic polynomial trajectory …","calculate function for quintic polynomial trajectory …","calculate function for hepta polynomial trajectory …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generation function for cubic polynomial trajectory","generation function for quintic polynomial trajectory","generation function for hepta polynomial trajectory","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","calculate function for hepta polynomial trajectory jerk","initialize function for cubic polynomial trajectory","initialize function for quintic polynomial trajectory","initialize function for hepta polynomial trajectory","calculate function for cubic polynomial trajectory","calculate function for quintic polynomial trajectory","calculate function for hepta polynomial trajectory","cubic polynomial trajectory","quintic polynomial trajectory","hepta polynomial trajectory","calculate function for cubic polynomial trajectory position","calculate function for quintic polynomial trajectory …","calculate function for hepta polynomial trajectory position","","","","","","","","","","calculate function for cubic polynomial trajectory velocity","calculate function for quintic polynomial trajectory …","calculate function for hepta polynomial trajectory velocity","transfer function","","","get denominator for transfer function","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","calculate function for transfer function","initialize function for transfer function","get numerator for transfer function","set denominator for transfer function","set numerator for transfer function","","","","get input for transfer function","get output for transfer function","zero function for transfer function"],"i":[0,0,0,0,16,16,16,0,0,0,16,16,0,16,0,0,0,0,0,0,0,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,0,9,11,9,11,9,9,9,9,11,9,9,11,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,11,9,11,9,11,9,9,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,14,12,13,14,12,13,14,0,0,0,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,0,[[]],[[]],0,[1,1],[2,2],0,[[]],[[]],0,0,0,0,0,0,0,0,0,[[],3],[[],3],[[],4],0,[[],5],[[],6],[[],6],[[],6],0,0,0,0,0,0,0,[[7,7,7],7],[[7,7,7,7],7],[[7,7,7],7],[[7,7,7,7,7],7],[[7,7,7,7],7],[[7,7,7],7],0,0,0,0,[[]],[[]],[8,8],[8,7],0,0,[[]],[8,8],[[]],[8,7],[8,7],[8,7],[[8,7,7,7],8],[8,6],[[7,7,7],8],[[7,7,7,7,7,7],8],[[7,7,7,7,7,7,7],8],[8,8],0,[[8,7,7],7],0,0,[8],[[8,7],8],[[8,7],8],[[8,7],8],[[8,7],8],[[8,7],8],[[8,6],8],0,[[],3],[[],3],[[],4],[8,8],0,0,0,0,0,0,0,0,[[9,10],9],[[]],[[]],[[]],[[]],[9,9],[9,9],[9,6],[[]],[[]],[9,9],[[]],[[]],0,0,0,[[9,7,7,7],9],[9,6],[[7,10,7,7],9],[9,9],0,[[9,7,7],7],[9],0,[[9,7],9],[[9,7],9],[[9,6],9],[[9,11],9],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[9,9],[[12,7],7],[[13,7],7],[[14,7],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,7,7,7,7,7,7],12],[[13,7,7,7,7,7,7,7,7],13],[[14,7,7,7,7,7,7,7,7,7,7],14],[[]],[[]],[[]],[[14,7],7],[[7,7,7,7,7,7],12],[[7,7,7,7,7,7,7,7],13],[[7,7,7,7,7,7,7,7,7,7],14],[[12,7]],[[13,7]],[[14,7]],0,0,0,[[12,7],7],[[13,7],7],[[14,7],7],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[12,7],7],[[13,7],7],[[14,7],7],0,[[]],[[]],[15],[[]],[[]],[[15,7],7],[[],15],[15],[15,15],[15,15],[[],3],[[],3],[[],4],[15],[15],[15,15]],"p":[[15,"f32"],[15,"f64"],[4,"Result"],[3,"TypeId"],[15,"str"],[6,"uint"],[6,"float"],[3,"PID"],[3,"PID_fuzzy"],[15,"usize"],[4,"op"],[3,"polytrack3"],[3,"polytrack5"],[3,"polytrack7"],[3,"TF"],[19,"Float"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
