var searchIndex = JSON.parse('{\
"liba":{"doc":"An algorithm library based on C/C++ language","t":"TLLAMFFGLLAMAAALLLGFFFFRRRRRRRRLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRFFFFFFRRRLLLLLLLLLLMMMMLLLALLLMMMMMMMLLLMLLLLMLLLMMLLLDMMDDLMLLLLLLLLLMMMLLLLRRRRRRRLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLL","n":["Float","borrow","borrow_mut","crc","f","f32_rsqrt","f64_rsqrt","float","from","into","mf","p","pid","polytrack","tf","try_from","try_into","type_id","uint","version","version_major","version_minor","version_patch","INIT16","INIT32","INIT64","INIT8","POLY16","POLY32","POLY64","POLY8","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","crc16","crc32","crc64","crc8","from","from","from","from","high","high","high","high","into","into","into","into","low","low","low","low","new_high","new_high","new_high","new_high","new_low","new_low","new_low","new_low","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","GAUSS","GBELL","NUL","SIG","TRAP","TRI","Z","gauss","gbell","sig","trap","tri","z","INC","OFF","POS","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buff","chan","chan","chan","chan","ec","err","fdb","from","from","from","fuzzy","into","into","into","k","kd","kd","ki","ki","kp","kp","kpid","kpid","kpid","mode","new","new","new","op","out","outf","outf","outf","outmax","outmin","outp","outp","outp","pid","pid","pid","pid_fuzzy","pid_neuron","rule","summax","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wd","wi","wp","wpid","zero","zero","zero","AND","AND_ALGEBRA","AND_BOUNDED","EQU","OR","OR_ALGEBRA","OR_BOUNDED","acc","acc","acc","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","gen","gen","gen","into","into","into","jer","new","new","new","out","out","out","polytrack3","polytrack5","polytrack7","pos","pos","pos","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vel","vel","vel","borrow","borrow_mut","den","from","input","into","iter","new","num","output","set_den","set_num","tf","try_from","try_into","type_id","zero"],"q":[[0,"liba"],[23,"liba::crc"],[79,"liba::mf"],[92,"liba::pid"],[163,"liba::pid::fuzzy"],[170,"liba::polytrack"],[213,"liba::tf"]],"d":["floating-point number union","","","Cyclic Redundancy Check","as a floating-point number","fast inverse square-root, $ \\\\frac{1}{\\\\sqrt{x}} $","fast inverse square-root, $ \\\\frac{1}{\\\\sqrt{x}} $","floating-point number stored using <code>f64</code>","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","membership function","as a floating-point array","proportional integral derivative controller","polynomial trajectory","transfer function","","","","Equivalent to C’s unsigned int type.","algorithm library version","algorithm library version major","algorithm library version minor","algorithm library version patch","initialize value for 16 bits Cyclic Redundancy Check","initialize value for 32 bits Cyclic Redundancy Check","initialize value for 64 bits Cyclic Redundancy Check","initialize value for 8 bits Cyclic Redundancy Check","polynomial value for 16 bits Cyclic Redundancy Check","polynomial value for 32 bits Cyclic Redundancy Check","polynomial value for 64 bits Cyclic Redundancy Check","polynomial value for 8 bits Cyclic Redundancy Check","","","","","","","","","Cyclic Redundancy Check for 16 bits","Cyclic Redundancy Check for 32 bits","Cyclic Redundancy Check for 64 bits","Cyclic Redundancy Check for 8 bits","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","calculation function for high 8 bits Cyclic Redundancy …","calculation function for high 16 bits Cyclic Redundancy …","calculation function for high 32 bits Cyclic Redundancy …","calculation function for high 64 bits Cyclic Redundancy …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","calculation function for low 8 bits Cyclic Redundancy Check","calculation function for low 16 bits Cyclic Redundancy …","calculation function for low 32 bits Cyclic Redundancy …","calculation function for low 64 bits Cyclic Redundancy …","initialize function for high 8 bits Cyclic Redundancy Check","initialize function for high 16 bits Cyclic Redundancy …","initialize function for high 32 bits Cyclic Redundancy …","initialize function for high 64 bits Cyclic Redundancy …","initialize function for low 8 bits Cyclic Redundancy Check","initialize function for low 16 bits Cyclic Redundancy Check","initialize function for low 32 bits Cyclic Redundancy Check","initialize function for low 64 bits Cyclic Redundancy Check","","","","","","","","","","","","","gaussian membership function","generalized bell-shaped membership function","none","sigmoidal membership function","trapezoidal membership function","triangular membership function","z-shaped membership function","gaussian membership function","generalized bell-shaped membership function","sigmoidal membership function","trapezoidal membership function","triangular membership function","z-shaped membership function","incremental PID controller","turn off PID controller","positional PID controller","","","","","","","set buffer for fuzzy PID controller","set buffer for multichannel PID controller","set buffer for multichannel fuzzy PID controller","set buffer for multichannel single neuron PID controller","channel","error change","cache error","cache feedback","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","fuzzy PID controller operator","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","proportional coefficient","derivative constant","base derivative constant","integral constant","base integral constant","proportional constant","base proportional constant","set proportional integral derivative constant for PID …","set proportional integral derivative constant for fuzzy …","set proportional integral derivative constant for single …","mode","initialize function for PID controller","initialize function for fuzzy PID controller","initialize function for single neuron PID controller","set fuzzy relational operator for fuzzy PID controller","controller output","calculate function for PID controller","calculate function for fuzzy PID controller","calculate function for single neuron PID controller","maximum output","minimum output","calculate function for multichannel PID controller","calculate function for multichannel fuzzy PID controller","calculate function for multichannel single neuron PID …","proportional integral derivative controller","proportional integral derivative controller","proportional integral derivative controller","fuzzy proportional integral derivative controller","single neuron proportional integral derivative controller","set rule base for fuzzy PID controller","maximum integral output","","","","","","","","","","derivative weight","integral weight","proportional weight","set proportional integral derivative weight for single …","zero clear function for PID controller","zero clear function for fuzzy PID controller","zero clear function for single neuron PID controller","min(l,r)","l*r","max(l,r)","sqrt(l,r)<em>sqrt(1-(1-r)</em>(1-r))","max(l,r)","l+r-l*r","min(l,r)","calculate function for cubic polynomial trajectory …","calculate function for quintic polynomial trajectory …","calculate function for hepta polynomial trajectory …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generation function for cubic polynomial trajectory","generation function for quintic polynomial trajectory","generation function for hepta polynomial trajectory","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","calculate function for hepta polynomial trajectory jerk","initialize function for cubic polynomial trajectory","initialize function for quintic polynomial trajectory","initialize function for hepta polynomial trajectory","calculate function for cubic polynomial trajectory","calculate function for quintic polynomial trajectory","calculate function for hepta polynomial trajectory","cubic polynomial trajectory","quintic polynomial trajectory","hepta polynomial trajectory","calculate function for cubic polynomial trajectory position","calculate function for quintic polynomial trajectory …","calculate function for hepta polynomial trajectory position","","","","","","","","","","calculate function for cubic polynomial trajectory velocity","calculate function for quintic polynomial trajectory …","calculate function for hepta polynomial trajectory velocity","","","get denominator for transfer function","Returns the argument unchanged.","get input for transfer function","Calls <code>U::from(self)</code>.","calculate function for transfer function","initialize function for transfer function","get numerator for transfer function","get output for transfer function","set denominator for transfer function","set numerator for transfer function","transfer function","","","","zero clear function for transfer function"],"i":[0,24,24,0,24,0,0,0,24,24,0,24,0,0,0,24,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,11,13,7,9,11,13,0,0,0,0,7,9,11,13,7,9,11,13,7,9,11,13,7,9,11,13,7,9,11,13,7,9,11,13,7,9,11,13,7,9,11,13,7,9,11,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,16,18,17,16,18,16,17,16,18,17,18,17,17,17,16,18,0,17,16,18,18,17,16,17,16,17,16,17,16,18,17,17,16,18,16,17,17,16,18,17,17,17,16,18,0,16,18,0,0,16,17,17,16,18,17,16,18,17,16,18,18,18,18,18,17,16,18,0,0,0,0,0,0,0,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,22,20,21,22,20,21,22,0,0,0,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,23,23,23,23,23,23,23,23,23,23,23,23,0,23,23,23,23],"f":[0,[[]],[[]],0,0,[1,1],[2,2],0,[[]],[[]],0,0,0,0,0,[[],3],[[],3],[[],4],0,[[],5],[[],6],[[],6],[[],6],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[7,8],8],[[9,10],10],[[11,12],12],[[13,14],14],[[]],[[]],[[]],[[]],[[7,8],8],[[9,10],10],[[11,12],12],[[13,14],14],[8,7],[10,9],[12,11],[14,13],[8,7],[10,9],[12,11],[14,13],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[],4],0,0,0,0,0,0,0,[[15,15,15],15],[[15,15,15,15],15],[[15,15,15],15],[[15,15,15,15,15],15],[[15,15,15,15],15],[[15,15,15],15],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[16,16],[17,17],[16,16],[18,18],0,0,0,0,[[]],[[]],[[]],0,[[]],[[]],[[]],0,0,0,0,0,0,0,[[17,15,15,15],17],[[16,15,15,15],16],[[18,15,15,15,15],18],0,[[15,15,15],17],[[15,15,15],16],[[15,15,15],18],[[16,6],16],0,[[17,15,15],15],[[16,15,15],15],[[18,15,15],15],0,0,[17],[16],[18],0,0,0,0,0,[[16,19],16],0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],0,0,0,[[18,15,15,15],18],[17,17],[16,16],[18,18],0,0,0,0,0,0,0,[[20,15],15],[[21,15],15],[[22,15],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[20,15,15,15,15,15,15],20],[[21,15,15,15,15,15,15,15,15],21],[[22,15,15,15,15,15,15,15,15,15,15],22],[[]],[[]],[[]],[[22,15],15],[[15,15,15,15,15,15],20],[[15,15,15,15,15,15,15,15],21],[[15,15,15,15,15,15,15,15,15,15],22],[[20,15]],[[21,15]],[[22,15]],0,0,0,[[20,15],15],[[21,15],15],[[22,15],15],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[20,15],15],[[21,15],15],[[22,15],15],[[]],[[]],[23],[[]],[23],[[]],[[23,15],15],[[],23],[23],[23],[23,23],[23,23],0,[[],3],[[],3],[[],4],[23,23]],"c":[],"p":[[15,"f32"],[15,"f64"],[4,"Result"],[3,"TypeId"],[15,"str"],[6,"uint"],[3,"crc8"],[15,"u8"],[3,"crc16"],[15,"u16"],[3,"crc32"],[15,"u32"],[3,"crc64"],[15,"u64"],[6,"float"],[3,"pid_fuzzy"],[3,"pid"],[3,"pid_neuron"],[15,"usize"],[3,"polytrack3"],[3,"polytrack5"],[3,"polytrack7"],[3,"tf"],[19,"Float"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
