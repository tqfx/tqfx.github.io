var searchIndex = JSON.parse('{\
"liba":{"doc":"An algorithm library based on C/C++ language","t":"OAFFGGAAAAFFGAFRRRRRRRRLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRRFFFFFFFFFFFFFRRRLLLLLLLLLMMMLLLALLLLLLLMMMMMMMLLLLLLLLLLMMMDMMDDLLLLMMMLLLLLLLLLMMMLLLLRRRRRRRMMMLLLLLLLLLLLLLLLLLLMLLLLDDDLLLMMMLLLLLLLLLMMMLLLLLLLLLLLLLLLDLLLLLLFLLLLLLLFMFMLLFMLLFLD","n":["PID_FUZZY_JOINT","crc","f32_rsqrt","f64_rsqrt","float","int","mf","pid","polytraj","tf","u32_sqrt","u64_sqrt","uint","version","version","INIT16","INIT32","INIT64","INIT8","POLY16","POLY32","POLY64","POLY8","be","be","be","be","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","crc16","crc32","crc64","crc8","from","from","from","from","into","into","into","into","le","le","le","le","new_be","new_be","new_be","new_be","new_le","new_le","new_le","new_le","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","DSIG","GAUSS","GAUSS2","GBELL","LINS","LINZ","NUL","PI","PSIG","S","SIG","TRAP","TRI","Z","dsig","gauss","gauss2","gbell","lins","linz","pi","psig","s","sig","trap","tri","z","INC","OFF","POS","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","ec","err","fdb","from","from","from","fuzzy","inc","inc","inc","into","into","into","joint","k","kd","kd","ki","ki","kp","kp","kpid","kpid","kpid","new","new","new","off","off","off","op","out","outmax","outmin","pid","pid","pid","pid_fuzzy","pid_neuron","pos","pos","rule","set_joint","sum","summax","summin","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wd","wi","wp","wpid","zero","zero","zero","CAP","CAP_ALGEBRA","CAP_BOUNDED","CUP","CUP_ALGEBRA","CUP_BOUNDED","EQU","a","a","a","acc","acc","acc","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","gen","gen","gen","into","into","into","j","jer","new","new","new","polytraj3","polytraj5","polytraj7","pos","pos","pos","q","q","q","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","v","v","v","vel","vel","vel","borrow","borrow_mut","den","from","input","into","iter","new","num","output","set_den","set_num","tf","try_from","try_into","type_id","zero","borrow","borrow_mut","check","eq","from","ge","gt","into","le","lt","major","major","minor","minor","new","partial_cmp","patch","patch","try_from","try_into","tweak","type_id","version"],"q":[[0,"liba"],[15,"liba::crc"],[71,"liba::mf"],[98,"liba::pid"],[172,"liba::pid::fuzzy"],[179,"liba::polytraj"],[229,"liba::tf"],[246,"liba::version"],[269,"core::result"],[270,"core::any"],[271,"core::cmp"],[272,"core::option"]],"d":["compute size of joint buffer for fuzzy PID controller","Cyclic Redundancy Check","reciprocal of square-root, $ \\\\frac{1}{\\\\sqrt{x}} $","reciprocal of square-root, $ \\\\frac{1}{\\\\sqrt{x}} $","floating-point number stored using <code>f64</code>","Equivalent to C’s int type.","membership function","proportional integral derivative controller","polynomial trajectory","transfer function","square root of an unsigned integer","square root of an unsigned integer","Equivalent to C’s unsigned int type.","version","algorithm library version","initialize value for 16 bits Cyclic Redundancy Check","initialize value for 32 bits Cyclic Redundancy Check","initialize value for 64 bits Cyclic Redundancy Check","initialize value for 8 bits Cyclic Redundancy Check","polynomial value for 16 bits Cyclic Redundancy Check","polynomial value for 32 bits Cyclic Redundancy Check","polynomial value for 64 bits Cyclic Redundancy Check","polynomial value for 8 bits Cyclic Redundancy Check","calculate for big-endian 8 bits Cyclic Redundancy Check","calculate for big-endian 16 bits Cyclic Redundancy Check","calculate for big-endian 32 bits Cyclic Redundancy Check","calculate for big-endian 64 bits Cyclic Redundancy Check","","","","","","","","","Cyclic Redundancy Check for 16 bits","Cyclic Redundancy Check for 32 bits","Cyclic Redundancy Check for 64 bits","Cyclic Redundancy Check for 8 bits","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","calculate for little-endian 8 bits Cyclic Redundancy Check","calculate for little-endian 16 bits Cyclic Redundancy Check","calculate for little-endian 32 bits Cyclic Redundancy Check","calculate for little-endian 64 bits Cyclic Redundancy Check","initialize for big-endian 8 bits Cyclic Redundancy Check","initialize for big-endian 16 bits Cyclic Redundancy Check","initialize for big-endian 32 bits Cyclic Redundancy Check","initialize for big-endian 64 bits Cyclic Redundancy Check","initialize for little-endian 8 bits Cyclic Redundancy Check","initialize for little-endian 16 bits Cyclic Redundancy …","initialize for little-endian 32 bits Cyclic Redundancy …","initialize for little-endian 64 bits Cyclic Redundancy …","","","","","","","","","","","","","difference between two sigmoidal membership functions","gaussian membership function","gaussian combination membership function","generalized bell-shaped membership function","linear s-shaped saturation membership function","linear z-shaped saturation membership function","none","pi-shaped membership function","product of two sigmoidal membership functions","s-shaped membership function","sigmoidal membership function","trapezoidal membership function","triangular membership function","z-shaped membership function","difference between two sigmoidal membership functions","gaussian membership function","gaussian combination membership function","generalized bell-shaped membership function","linear s-shaped saturation membership function","linear z-shaped saturation membership function","pi-shaped membership function","product of two sigmoidal membership functions","s-shaped membership function","sigmoidal membership function","trapezoidal membership function","triangular membership function","z-shaped membership function","incremental PID controller","turn off PID controller","positional PID controller","","","","","","","","","","error change","cache error","cache feedback","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","fuzzy PID controller operator","calculate for incremental PID controller","calculate for incremental fuzzy PID controller","calculate for incremental single neuron PID controller","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","get joint buffer for fuzzy PID controller","proportional coefficient","derivative constant","base derivative constant","integral constant","base integral constant","proportional constant","base proportional constant","set proportional integral derivative constant for PID …","set proportional integral derivative constant for fuzzy …","set proportional integral derivative constant for single …","initialize for PID controller","initialize for fuzzy PID controller","initialize for single neuron PID controller","calculate for PID controller","calculate for fuzzy PID controller","calculate for single neuron PID controller","set fuzzy relational operator for fuzzy PID controller","controller output","maximum output","minimum output","proportional integral derivative controller","proportional integral derivative controller","proportional integral derivative controller","fuzzy proportional integral derivative controller","single neuron proportional integral derivative controller","calculate for positional PID controller","calculate for positional fuzzy PID controller","set rule base for fuzzy PID controller","set joint buffer for fuzzy PID controller","controller integral output","maximum integral output","minimum integral output","","","","","","","","","","derivative weight","integral weight","proportional weight","set proportional integral derivative weight for single …","zeroing for PID controller","zeroing for fuzzy PID controller","zeroing for single neuron PID controller","min(a,b)","a*b","max(a+b-1,0)","max(a,b)","a+b-a*b","min(a+b,1)","sqrt(a,b)<em>sqrt(1-(1-a)</em>(1-b))","coefficients of acceleration","coefficients of acceleration","coefficients of acceleration","calculate for cubic polynomial trajectory acceleration","calculate for quintic polynomial trajectory acceleration","calculate for hepta polynomial trajectory acceleration","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generate for cubic polynomial trajectory","generate for quintic polynomial trajectory","generate for hepta polynomial trajectory","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","coefficients of jerk","calculate for hepta polynomial trajectory jerk","initialize for cubic polynomial trajectory","initialize for quintic polynomial trajectory","initialize for hepta polynomial trajectory","cubic polynomial trajectory","quintic polynomial trajectory","hepta polynomial trajectory","calculate for cubic polynomial trajectory position","calculate for quintic polynomial trajectory position","calculate for hepta polynomial trajectory position","coefficients of position","coefficients of position","coefficients of position","","","","","","","","","","coefficients of velocity","coefficients of velocity","coefficients of velocity","calculate for cubic polynomial trajectory velocity","calculate for quintic polynomial trajectory velocity","calculate for hepta polynomial trajectory velocity","","","get denominator for transfer function","Returns the argument unchanged.","get input for transfer function","Calls <code>U::from(self)</code>.","calculate for transfer function","initialize for transfer function","get numerator for transfer function","get output for transfer function","set denominator for transfer function","set numerator for transfer function","transfer function","","","","zeroing for transfer function","","","algorithm library version check","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","algorithm library version major","major number","algorithm library version minor","minor number","initialize for version","","algorithm library version patch","patch number","","","algorithm library version tweak","","version"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,11,12,7,10,11,12,7,10,11,12,0,0,0,0,7,10,11,12,7,10,11,12,7,10,11,12,7,10,11,12,7,10,11,12,7,10,11,12,7,10,11,12,7,10,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,17,18,16,17,18,16,17,18,18,16,16,16,17,18,0,16,17,18,16,17,18,17,18,16,17,16,17,16,17,16,17,18,16,17,18,16,17,18,17,16,16,16,0,17,18,0,0,16,17,17,17,16,16,16,16,17,18,16,17,18,16,17,18,18,18,18,18,16,17,18,0,0,0,0,0,0,0,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,23,23,21,22,23,0,0,0,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,24,24,24,24,24,24,24,24,24,24,24,24,0,24,24,24,24,26,26,0,26,26,26,26,26,26,26,0,26,0,26,26,26,0,26,26,26,0,26,0],"f":[0,0,[1,1],[2,2],0,0,0,0,0,0,[3,4],[5,3],0,0,[[],6],0,0,0,0,0,0,0,0,[[7,[9,[8]],8],8],[[10,[9,[8]],4],4],[[11,[9,[8]],3],3],[[12,[9,[8]],5],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[7,[9,[8]],8],8],[[10,[9,[8]],4],4],[[11,[9,[8]],3],3],[[12,[9,[8]],5],5],[8,7],[4,10],[3,11],[5,12],[8,7],[4,10],[3,11],[5,12],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[15,15,15,15,15],15],[[15,15,15],15],[[15,15,15,15,15],15],[[15,15,15,15],15],[[15,15,15],15],[[15,15,15],15],[[15,15,15,15,15],15],[[15,15,15,15,15],15],[[15,15,15],15],[[15,15,15],15],[[15,15,15,15,15],15],[[15,15,15,15],15],[[15,15,15],15],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],16],[[],17],[[],18],0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[16,15,15],15],[[17,15,15],15],[[18,15,15],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,[[9,[8]]]],0,0,0,0,0,0,0,[[16,15,15,15],16],[[17,15,15,15],17],[[18,15,15,15,15],18],[[],16],[[],17],[[],18],[[16,15,15],15],[[17,15,15],15],[[18,15,15],15],[[17,19],17],0,0,0,0,0,0,0,0,[[16,15,15],15],[[17,15,15],15],[[17,20,[9,[15]],[9,[15]],[9,[15]],[9,[15]],[9,[15]]],17],[[17,[9,[8]],20],17],0,0,0,[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],0,0,0,[[18,15,15,15],18],[16,16],[17,17],[18,18],0,0,0,0,0,0,0,0,0,0,[[21,15],15],[[22,15],15],[[23,15],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[21,15,15,15,15,15,15],21],[[22,15,15,15,15,15,15,15,15],22],[[23,15,15,15,15,15,15,15,15,15,15],23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[23,15],15],[[15,15,15,15,15,15],21],[[15,15,15,15,15,15,15,15],22],[[15,15,15,15,15,15,15,15,15,15],23],0,0,0,[[21,15],15],[[22,15],15],[[23,15],15],0,0,0,[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],0,0,0,[[21,15],15],[[22,15],15],[[23,15],15],[-1,-2,[],[]],[-1,-2,[],[]],[24,[[9,[15]]]],[-1,-1,[]],[24,[[9,[15]]]],[-1,-2,[],[]],[[24,15],15],[[[9,[15]],[9,[15]],[9,[15]],[9,[15]]],24],[24,[[9,[15]]]],[24,[[9,[15]]]],[[24,[9,[15]],[9,[15]]],24],[[24,[9,[15]],[9,[15]]],24],0,[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[24,24],[-1,-2,[],[]],[-1,-2,[],[]],[[19,19,19],25],[[26,26],27],[-1,-1,[]],[[26,26],27],[[26,26],27],[-1,-2,[],[]],[[26,26],27],[[26,26],27],[[],19],0,[[],19],0,[[19,19,19],26],[[26,26],[[29,[28]]]],[[],19],0,[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[[],3],[-1,14,[]],0],"c":[],"p":[[15,"f32"],[15,"f64"],[15,"u32"],[15,"u16"],[15,"u64"],[15,"str"],[3,"crc8",15],[15,"u8"],[15,"slice"],[3,"crc16",15],[3,"crc32",15],[3,"crc64",15],[4,"Result",269],[3,"TypeId",270],[6,"float",0],[3,"pid",98],[3,"pid_fuzzy",98],[3,"pid_neuron",98],[6,"uint",0],[15,"usize"],[3,"polytraj3",179],[3,"polytraj5",179],[3,"polytraj7",179],[3,"tf",229],[6,"int",0],[3,"version",246],[15,"bool"],[4,"Ordering",271],[4,"Option",272]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
