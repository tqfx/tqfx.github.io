var searchIndex = JSON.parse('{\
"liba":{"doc":"An algorithm library based on C/C++ language","t":[2,2,2,2,2,6,2,6,5,5,0,0,0,0,0,5,5,5,5,3,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,5,5,5,5,5,5,17,17,3,17,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,12,12,11,11,11,11,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FPID","PID","PolyTrack3","PolyTrack5","PolyTrack7","Real","TF","Uint","f32_rsqrt","f64_rsqrt","fpid","mf","pid","polytrack","tf","version","version_major","version_minor","version_patch","FPID","base","borrow","borrow_mut","buff","dt","from","ilim","inc","into","kd","ki","kp","kpid","mode","new","off","olim","pid","pos","proc","set_dt","set_mode","try_from","try_into","type_id","zero","GAUSS","GBELL","NUL","SIG","TRAP","TRI","Z","gauss","gbell","sig","trap","tri","z","INC","OFF","PID","POS","borrow","borrow_mut","dt","e","ec","fdb","from","inc","into","kd","ki","kp","kpid","mode","new","new_inc","new_pos","off","out","outmax","outmin","pos","proc","set_dt","set_kd","set_ki","set_kp","set_mode","sum","summax","try_from","try_into","type_id","zero","PolyTrack3","PolyTrack5","PolyTrack7","a","a","acc","acc","acc","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","gen","gen","gen","into","into","into","j","jer","new","new","new","new1","new1","new1","new2","new2","new2","out","out","out","pos","pos","pos","q","q","q","t","t","t","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","v","v","v","vec","vec","vec","TF","borrow","borrow_mut","den","from","into","new","num","proc","set_den","set_num","try_from","try_into","type_id","u","v","zero"],"q":["liba","","","","","","","","","","","","","","","","","","","liba::fpid","","","","","","","","","","","","","","","","","","","","","","","","","","","liba::mf","","","","","","","","","","","","","liba::pid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","liba::polytrack","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","liba::tf","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","fast inverse square-root, $ \\\\frac{1}{\\\\sqrt{x}} $","fast inverse square-root, $ \\\\frac{1}{\\\\sqrt{x}} $","fuzzy proportional integral derivative controller","membership function","proportional integral derivative controller","polynomial trajectory","transfer function","algorithm library version","algorithm library version major","algorithm library version minor","algorithm library version patch","fuzzy proportional integral derivative controller","set rule base for fuzzy PID controller","","","set buffer for fuzzy PID controller","get sampling time unit(s) for fuzzy PID controller","Returns the argument unchanged.","set input extreme value for fuzzy PID controller","incremental fuzzy PID controller","Calls <code>U::from(self)</code>.","base derivative constant","base integral constant","base proportional constant","set proportional integral derivative constant for fuzzy …","get mode for fuzzy PID controller","initialize function for fuzzy PID controller, default is …","turn off fuzzy PID controller","set output extreme value for fuzzy PID controller","proportional integral derivative controller","positional fuzzy PID controller","process function for fuzzy PID controller","set sampling time unit(s) for fuzzy PID controller","set mode for PID controller","","","","zero function for fuzzy PID controller","gaussian membership function","generalized bell-shaped membership function","none","sigmoidal membership function","trapezoidal membership function","triangular membership function","z-shaped membership function","gaussian membership function","generalized bell-shaped membership function","sigmoidal membership function","trapezoidal membership function","triangular membership function","z-shaped membership function","incremental PID controller","turn off PID controller","proportional integral derivative controller","positional PID controller","","","get sampling time unit(s) for PID controller","error input","error change","cache feedback","Returns the argument unchanged.","incremental PID controller","Calls <code>U::from(self)</code>.","get derivative constant for PID controller","get integral constant for PID controller","get proportional constant for PID controller","set proportional integral derivative constant for PID …","get mode for PID controller","initialize function for PID controller, default is turn off","initialize function for incremental PID controller","initialize function for positional PID controller","turn off PID controller","controller output","maximum output","minimum output","positional PID controller","process function for PID controller","set sampling time unit(s) for PID controller","set derivative constant for PID controller","set integral constant for PID controller","set proportional constant for PID controller","set mode for PID controller","(integral) output item sum","maximum integral output","","","","zero function for PID controller","cubic polynomial trajectory","quintic polynomial trajectory","hepta polynomial trajectory","acceleration","acceleration","process function for cubic polynomial trajectory …","process function for quintic polynomial trajectory …","process function for hepta polynomial trajectory …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generation function for cubic polynomial trajectory","generation function for quintic polynomial trajectory","generation function for hepta polynomial trajectory","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","jerk","process function for hepta polynomial trajectory jerk","initialize function for cubic polynomial trajectory","initialize function for quintic polynomial trajectory","initialize function for hepta polynomial trajectory","initialize function for cubic polynomial trajectory","initialize function for quintic polynomial trajectory","initialize function for hepta polynomial trajectory","initialize function for cubic polynomial trajectory","initialize function for quintic polynomial trajectory","initialize function for hepta polynomial trajectory","process function for cubic polynomial trajectory","process function for quintic polynomial trajectory","process function for hepta polynomial trajectory","process function for cubic polynomial trajectory position","process function for quintic polynomial trajectory position","process function for hepta polynomial trajectory position","position","position","position","time unit(s)","time unit(s)","time unit(s)","","","","","","","","","","velocity","velocity","velocity","process function for cubic polynomial trajectory velocity","process function for quintic polynomial trajectory velocity","process function for hepta polynomial trajectory velocity","transfer function","","","get denominator for transfer function","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","initialize function for transfer function","get numerator for transfer function","process function for transfer function","set denominator for transfer function","set numerator for transfer function","","","","get input for transfer function","get output for transfer function","zero function for transfer function"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,14,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,0,0,0,0,0,[1,1],[2,2],0,0,0,0,0,[[],3],[[],4],[[],4],[[],4],0,[[5,6],5],[[]],[[]],[5,5],[5,7],[[]],[[5,8,8],5],[5,5],[[]],0,0,0,[[5,8,8,8],5],[5,7],[[8,6,8,8,8,8],5],[5,5],[[5,8,8],5],0,[[5,8],5],[[5,8,8],8],[[5,8],5],[[5,7],5],[[],9],[[],9],[[],10],[5,5],0,0,0,0,0,0,0,[[8,8,8],8],[[8,8,8,8],8],[[8,8,8],8],[[8,8,8,8,8],8],[[8,8,8,8],8],[[8,8,8],8],0,0,0,0,[[]],[[]],[11,8],0,0,0,[[]],[11,11],[[]],[11,8],[11,8],[11,8],[[11,8,8,8],11],[11,7],[[8,8,8],11],[[8,8,8,8,8,8],11],[[8,8,8,8,8,8,8],11],[11,11],0,0,0,[[11,8],11],[[11,8,8],8],[[11,8],11],[[11,8],11],[[11,8],11],[[11,8],11],[[11,7],11],0,0,[[],9],[[],9],[[],10],[11,11],0,0,0,0,0,[[12,8],8],[[13,8],8],[[14,8],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,12],[13,13],[14,14],[[]],[[]],[[]],0,[[14,8],8],[[8,8,8,8,8,8],12],[[8,8,8,8,8,8,8,8],13],[[8,8,8,8,8,8,8,8,8,8],14],[[],12],[[],13],[[],14],[[],12],[[],13],[[],14],[[12,8]],[[13,8]],[[14,8]],[[12,8],8],[[13,8],8],[[14,8],8],0,0,0,0,0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],0,0,0,[[12,8],8],[[13,8],8],[[14,8],8],0,[[]],[[]],[15],[[]],[[]],[[],15],[15],[[15,8],8],[15,15],[15,15],[[],9],[[],9],[[],10],[15],[15],[15,15]],"p":[[15,"f32"],[15,"f64"],[3,"String"],[15,"u32"],[3,"FPID"],[15,"usize"],[6,"Uint"],[6,"Real"],[4,"Result"],[3,"TypeId"],[3,"PID"],[3,"PolyTrack3"],[3,"PolyTrack5"],[3,"PolyTrack7"],[3,"TF"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
