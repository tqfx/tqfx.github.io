var searchIndex = JSON.parse('{\
"liba":{"doc":"An algorithm library based on C/C++ language","t":"OMMMMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDMLLLLMLMLLLLMFFMGLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLFFDLLLLMGLLLLLLLLLLLLLLLLLLMLLMMMMMMMLLLLDLLMALMLLLLLLLLLLLLLLLLLLLLLMMMLMMLLDMMDDDDDLLLLLLMMMMMMLLLLLLLMMMMMMMMMMDMDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFGMMMMMLLLLDMMMMLLLLLLLRRRRRRRRRRRRRRRRRRRRRFFFFFFFFFFFFF","n":["PID_FUZZY_JOINT","a","a","a","ac","acc","acc","acc","acc","alpha","alpha","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","crc16","crc32","crc64","crc8","de","default","default","default","den","ec","eq","err","eval","eval","eval","eval","extra","f32_rsqrt","f64_rsqrt","fdb","float","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fuzzy","ge","gen","gen","gen","gen","gen","gen","gen_lsb","gen_lsb","gen_lsb","gen_lsb","gen_msb","gen_msb","gen_msb","gen_msb","gt","hash_bkdr","hash_sdbm","hpf","inc","inc","inc","input","input","int","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","iter","iter","iter","j","jer","joint","k","kd","kd","ki","ki","kp","kp","kpid","kpid","kpid","le","lpf","lt","major","major","mf","minor","minor","new","new","new","new","new","new","new","new","new","new","new","new_lsb","new_lsb","new_lsb","new_lsb","new_msb","new_msb","new_msb","new_msb","num","op","out","outmax","outmin","output","output","output","partial_cmp","patch","pid","pid","pid","pid_fuzzy","pid_neuro","polytraj3","polytraj5","polytraj7","pos","pos","pos","pos","pos","pos","q","q","q","q","q1","q2","rule","run","run","run","set_den","set_joint","set_num","sum","summax","summin","t","t1","t2","table","table","table","table","tf","third","traptraj","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tweak","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u32_sqrt","u64_sqrt","uint","v","v","v","vc","ve","vel","vel","vel","vel","version","vs","wd","wi","wp","wpid","zero","zero","zero","zero","zero","zero","CAP","CAP_ALGEBRA","CAP_BOUNDED","CUP","CUP_ALGEBRA","CUP_BOUNDED","EQU","DSIG","GAUSS","GAUSS2","GBELL","LINS","LINZ","NUL","PI","PSIG","S","SIG","TRAP","TRI","Z","dsig","gauss","gauss2","gbell","lins","linz","pi","psig","s","sig","trap","tri","z"],"q":[[0,"liba"],[282,"liba::fuzzy"],[289,"liba::mf"],[316,"core::cmp"],[317,"core::option"],[318,"core::result"],[319,"core::any"]],"d":["compute size of joint buffer for fuzzy PID controller","coefficients of acceleration","coefficients of acceleration","coefficients of acceleration","acceleration before constant velocity","calculate for cubic polynomial trajectory acceleration","calculate for quintic polynomial trajectory acceleration","calculate for hepta polynomial trajectory acceleration","calculate for trapezoidal velocity profile trajectory …","filter coefficient","filter coefficient","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algorithm library version check","Cyclic Redundancy Check for 16 bits","Cyclic Redundancy Check for 32 bits","Cyclic Redundancy Check for 64 bits","Cyclic Redundancy Check for 8 bits","acceleration after constant velocity","","","","get denominator for transfer function","error change","","cache error","calculate for CRC-8","calculate for CRC-16","calculate for CRC-32","calculate for CRC-64","extra number","reciprocal of square-root, $ \\\\frac{1}{\\\\sqrt{x}} $","reciprocal of square-root, $ \\\\frac{1}{\\\\sqrt{x}} $","cache feedback","floating-point number stored using <code>f64</code>","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","fuzzy PID controller operator","","generate for High Pass Filter","generate for Low Pass Filter","generate for cubic polynomial trajectory","generate for quintic polynomial trajectory","generate for hepta polynomial trajectory","generate for trapezoidal velocity profile trajectory","generate for LSB CRC-8","generate for LSB CRC-16","generate for LSB CRC-32","generate for LSB CRC-64","generate for MSB CRC-8","generate for MSB CRC-16","generate for MSB CRC-32","generate for MSB CRC-64","","a hash function whose prime number is 131","a hash function whose prime number is 65599","High Pass Filter","calculate for incremental PID controller","calculate for incremental fuzzy PID controller","calculate for incremental single neuron PID controller","get input for transfer function","filter input","Equivalent to C’s int type.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","calculate for High Pass Filter","calculate for Low Pass Filter","calculate for transfer function","coefficients of jerk","calculate for hepta polynomial trajectory jerk","get joint buffer for fuzzy PID controller","proportional coefficient","derivative constant","base derivative constant","integral constant","base integral constant","proportional constant","base proportional constant","set proportional integral derivative constant for PID …","set proportional integral derivative constant for fuzzy …","set proportional integral derivative constant for single …","","Low Pass Filter","","algorithm library version major","major number","membership function","algorithm library version minor","minor number","initialize for High Pass Filter","initialize for Low Pass Filter","initialize for PID controller","initialize for fuzzy PID controller","initialize for single neuron PID controller","initialize for cubic polynomial trajectory","initialize for quintic polynomial trajectory","initialize for hepta polynomial trajectory","initialize for transfer function","initialize for trapezoidal velocity profile trajectory","initialize for version","initialize for LSB CRC-8","initialize for LSB CRC-16","initialize for LSB CRC-32","initialize for LSB CRC-64","initialize for MSB CRC-8","initialize for MSB CRC-16","initialize for MSB CRC-32","initialize for MSB CRC-64","get numerator for transfer function","set fuzzy relational operator for fuzzy PID controller","controller output","maximum output","minimum output","get output for transfer function","filter output","filter output","","algorithm library version patch","proportional integral derivative controller","proportional integral derivative controller","proportional integral derivative controller","fuzzy proportional integral derivative controller","single neuron proportional integral derivative controller","cubic polynomial trajectory","quintic polynomial trajectory","hepta polynomial trajectory","calculate for positional PID controller","calculate for positional fuzzy PID controller","calculate for cubic polynomial trajectory position","calculate for quintic polynomial trajectory position","calculate for hepta polynomial trajectory position","calculate for trapezoidal velocity profile trajectory …","coefficients of position","coefficients of position","coefficients of position","final position","position before constant velocity","position after constant velocity","set rule base for fuzzy PID controller","calculate for PID controller","calculate for fuzzy PID controller","calculate for single neuron PID controller","set denominator for transfer function","set joint buffer for fuzzy PID controller","set numerator for transfer function","controller integral output","maximum integral output","minimum integral output","total time","time before constant velocity","time after constant velocity","Cyclic Redundancy Check comparison table","Cyclic Redundancy Check comparison table","Cyclic Redundancy Check comparison table","Cyclic Redundancy Check comparison table","transfer function","third number","trapezoidal velocity profile trajectory","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algorithm library version tweak","","","","","","","","","","","","","","","","square root of an unsigned integer","square root of an unsigned integer","Equivalent to C’s unsigned int type.","coefficients of velocity","coefficients of velocity","coefficients of velocity","constant velocity","final velocity","calculate for cubic polynomial trajectory velocity","calculate for quintic polynomial trajectory velocity","calculate for hepta polynomial trajectory velocity","calculate for trapezoidal velocity profile trajectory …","version","initial velocity","derivative weight","integral weight","proportional weight","set proportional integral derivative weight for single …","zeroing for High Pass Filter","zeroing for Low Pass Filter","zeroing for PID controller","zeroing for fuzzy PID controller","zeroing for single neuron PID controller","zeroing for transfer function","min(a,b)","a*b","max(a+b-1,0)","max(a,b)","a+b-a*b","min(a+b,1)","sqrt(a,b)<em>sqrt(1-(1-a)</em>(1-b))","difference between two sigmoidal membership functions","gaussian membership function","gaussian combination membership function","generalized bell-shaped membership function","linear s-shaped saturation membership function","linear z-shaped saturation membership function","none","pi-shaped membership function","product of two sigmoidal membership functions","s-shaped membership function","sigmoidal membership function","trapezoidal membership function","triangular membership function","z-shaped membership function","difference between two sigmoidal membership functions","gaussian membership function","gaussian combination membership function","generalized bell-shaped membership function","linear s-shaped saturation membership function","linear z-shaped saturation membership function","pi-shaped membership function","product of two sigmoidal membership functions","s-shaped membership function","sigmoidal membership function","trapezoidal membership function","triangular membership function","z-shaped membership function"],"i":[0,1,3,4,5,1,3,4,5,25,26,15,17,19,21,25,26,8,9,10,1,3,4,11,5,13,15,17,19,21,25,26,8,9,10,1,3,4,11,5,13,13,0,0,0,0,5,8,9,10,11,10,13,8,15,17,19,21,13,0,0,8,0,15,17,19,21,25,26,8,9,10,1,3,4,11,5,13,0,13,25,26,1,3,4,5,15,17,19,21,15,17,19,21,13,0,0,0,8,9,10,11,25,0,15,17,19,21,25,26,8,9,10,1,3,4,11,5,13,25,26,11,4,4,9,10,8,9,8,9,8,9,8,9,10,13,0,13,13,13,0,13,13,25,26,8,9,10,1,3,4,11,5,13,15,17,19,21,15,17,19,21,11,9,8,8,8,11,25,26,13,13,0,9,10,0,0,0,0,0,8,9,1,3,4,5,1,3,4,5,5,5,9,8,9,10,11,9,11,8,8,8,5,5,5,15,17,19,21,0,13,0,15,17,19,21,25,26,8,9,10,1,3,4,11,5,13,15,17,19,21,25,26,8,9,10,1,3,4,11,5,13,13,15,17,19,21,25,26,8,9,10,1,3,4,11,5,13,0,0,0,1,3,4,5,5,1,3,4,5,0,5,10,10,10,10,25,26,8,9,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,[[1,2],2],[[3,2],2],[[4,2],2],[[5,2],2],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[6,6,6],7],0,0,0,0,0,[[],8],[[],9],[[],10],[11,[[12,[2]]]],0,[[13,13],14],0,[[15,[12,[16]],16],16],[[17,[12,[16]],18],18],[[19,[12,[16]],20],20],[[21,[12,[16]],22],22],0,[23,23],[24,24],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[13,13],14],[[25,2,2],25],[[26,2,2],26],[[1,2,2,2,2,2],1],[[3,2,2,2,2,2,2,2],3],[[4,2,2,2,2,2,2,2,2,2],4],[[5,2,2,2,2,2,2],2],[[15,16],15],[[17,18],17],[[19,20],19],[[21,22],21],[[15,16],15],[[17,18],17],[[19,20],19],[[21,22],21],[[13,13],14],[[[12,[16]],20],20],[[[12,[16]],20],20],0,[[8,2,2],2],[[9,2,2],2],[[10,2,2],2],[11,[[12,[2]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[25,2],2],[[26,2],2],[[11,2],2],0,[[4,2],2],[9,[[12,[16]]]],0,0,0,0,0,0,0,[[8,2,2,2],8],[[9,2,2,2],9],[[10,2,2,2,2],10],[[13,13],14],0,[[13,13],14],[[],6],0,0,[[],6],0,[[2,2],25],[[2,2],26],[[],8],[[],9],[[],10],[[2,2,2,2,2],1],[[2,2,2,2,2,2,2],3],[[2,2,2,2,2,2,2,2,2],4],[[[12,[2]],[12,[2]],[12,[2]],[12,[2]]],11],[[2,2,2,2,2,2],5],[[6,6,6],13],[16,15],[18,17],[20,19],[22,21],[16,15],[18,17],[20,19],[22,21],[11,[[12,[2]]]],[[9,6],9],0,0,0,[11,[[12,[2]]]],0,0,[[13,13],[[28,[27]]]],[[],6],0,0,0,0,0,0,0,0,[[8,2,2],2],[[9,2,2],2],[[1,2],2],[[3,2],2],[[4,2],2],[[5,2],2],0,0,0,0,0,0,[[9,29,[12,[2]],[12,[2]],[12,[2]],[12,[2]],[12,[2]]],9],[[8,2,2],2],[[9,2,2],2],[[10,2,2],2],[[11,[12,[2]],[12,[2]]],11],[[9,[12,[16]],29],9],[[11,[12,[2]],[12,[2]]],11],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[],20],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[20,18],[22,20],0,0,0,0,0,0,[[1,2],2],[[3,2],2],[[4,2],2],[[5,2],2],0,0,0,0,0,[[10,2,2,2],10],[25,25],[26,26],[8,8],[9,9],[10,10],[11,11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[2,2,2,2,2],2],[[2,2,2],2],[[2,2,2,2,2],2],[[2,2,2,2],2],[[2,2,2],2],[[2,2,2],2],[[2,2,2,2,2],2],[[2,2,2,2,2],2],[[2,2,2],2],[[2,2,2],2],[[2,2,2,2,2],2],[[2,2,2,2],2],[[2,2,2],2]],"c":[],"p":[[3,"polytraj3",0],[6,"float",0],[3,"polytraj5",0],[3,"polytraj7",0],[3,"traptraj",0],[6,"uint",0],[6,"int",0],[3,"pid",0],[3,"pid_fuzzy",0],[3,"pid_neuro",0],[3,"tf",0],[15,"slice"],[3,"version",0],[15,"bool"],[3,"crc8",0],[15,"u8"],[3,"crc16",0],[15,"u16"],[3,"crc32",0],[15,"u32"],[3,"crc64",0],[15,"u64"],[15,"f32"],[15,"f64"],[3,"hpf",0],[3,"lpf",0],[4,"Ordering",316],[4,"Option",317],[15,"usize"],[4,"Result",318],[3,"TypeId",319]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
